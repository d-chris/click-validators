"""
.. include:: ../README.md
"""

from typing import Optional

import click
import validators

from .decorator import click_validatortype
from .path import Path

{% for validator in validators %}

{% if validator.params %}
def {{ validator.name }}(
    *,
    {{ validator.params }}
) -> click.ParamType:
    """
    {{ validator.docstring }}

    Returns a `click.ParamType` instance which wraps `validators.{{ validator.name }}`.
    """
    {% if "**kwargs" in validator.params %}
    params = {k: v for k, v in locals().items() if k != "kwargs"}
    return click_validatortype(validators.{{ validator.name }})(**params, **kwargs)
    {% else -%}
    return click_validatortype(validators.{{ validator.name }})(**locals())
    {% endif %}
{% else %}
def {{ validator.name }}() -> click.ParamType:
    """
    {{ validator.docstring }}

    Returns a `click.ParamType` instance which wraps `validators.{{ validator.name }}`.
    """
    return click_validatortype(validators.{{ validator.name }})()
{% endif %}
{% endfor %}

__all__ = [
    "Path",
    {% for validator in validators %}
    "{{ validator.name }}",
    {% endfor %}
]
